
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer:
"   Peng Cheng
" Version:
"   0.2 - 12/22/2014 12:19:11
" Sections:
"   -> Plantform function
"   -> General
"   -> Vim user interface
"   -> Colors and Fonts
"   -> Files and backups
"   -> Text,tab and indent related
"   -> Visual mode related
"   -> Moving around, tabs and buffers
"   -> Editing mappings
"   -> vimgrep searching and cope displaying
"   -> Misc
"   -> Plugins
"   -> Helper function
""""""""""""""""""""""""""""""""""""""""""""""""""""""""



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Plantform function
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:iswindows=0
let g:islinux=0
if (has("win32")||has("win64")||has("win95")||has("win16"))
    let g:iswindows=1
else
    let g:islinux=1
endif
" 判断是终端还是gvim
if has("gui_running")
    let g:isGUI=1
else
    let g:isGUI=0
endif
"windows gvim配置
if(g:iswindows && g:isGUI)
    source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim
    behave mswin

    set diffexpr=MyDiff()
    function MyDiff()
      let opt = '-a --binary '
      if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
      if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
      let arg1 = v:fname_in
      if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
      let arg2 = v:fname_new
      if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
      let arg3 = v:fname_out
      if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
      let eq = ''
      if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
          let cmd = '""' . $VIMRUNTIME . '\diff"'
          let eq = '"'
        else
          let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
      else
        let cmd = $VIMRUNTIME . '\diff'
      endif
      silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
endif



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
" Sets how many lines of history VIM has to remember
set history=100

" Enable filetype plugins
filetype indent on              "针对不同文件类型采用不同缩进格式
filetype plugin on              "针对不同的文件类型加载对应的插件
filetype plugin indent on       "启用自动补全

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader=","
let g:mapleader=","

" Fast saving and quit and so on
nmap <leader>w :w!<cr>
nmap <leader>q :q<cr>

" Quickly get out of insert mode without your fingers having to leave
" the home row (either use 'jj' or 'jk')
imap jj <Esc> 

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<CR> 
            
" 关闭折行
set nowrap


""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> VIM user interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn on the wild menu
set wildmenu

" Ingore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignorecase case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500


""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Colors and Fonts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax hightlighting
syntax on 

" 下面这行是为了freemarker，卧槽
au BufNewFile,BufRead *.ftl set filetype=html

set cul "highlight row
set t_Co=256
if has("gui_running")
    set guioptions-=T
    color molokai
else
    color darkblue
endif
set background=dark
set synmaxcol=0 "字符过长 语法高亮错误 解决办法 高亮

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8
set fileencodings=ucs-bom,utf-8,gbk,gb2312,default,latin1
"解决菜单栏乱码
set langmenu=zh_CN
let $LANG = 'zh_CN.UTF-8'
source $VIMRUNTIME/delmenu.vim  
source $VIMRUNTIME/menu.vim 

" Use Unix as the standard file type
set ffs=unix,dos,mac


""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Files, backups and undo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off                                       
set nobk
set nowb
"set noswapfile
if(g:iswindows && g:isGUI)
    set directory=D:\tmp\vim\swap
    set undodir=D:\tmp\vim\undo
else
    set directory=~/tmp/vim/swap
    set undodir=~/tmp/vim/undo
endif
"set directory=~/tmp/vim/swap if swap file is needed, use this


""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab "Use spaces instead of tabs
set smarttab "Be smart when using tabs ; )

set tabstop=4       "将tab键改为4个空格
set softtabstop=4
set shiftwidth=4    "自动缩进时，使用4个空格，默认是8个

" Linebreak on 200 characters
set lbr
set tw=200

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
set autoindent "C language indent
set nu              "Show line numbers 
set showcmd         "在ruler左边显示当前正在输入的命令，提示性的，避免误操作

set cc=80 "colorcolumn 80

set foldmethod=indent "根据缩进进行折叠
"set foldmethod=syntax "根据语法进行折叠
set nofoldenable "启动vim时关闭折叠代码  za打开关闭当前折叠 zM关闭所有折叠 zR打开所有折叠


""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Visual mode related 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Moving around, tabs, windows and buffers 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break as break lines
nnoremap j gj
nnoremap k gk

" Easy window navigation
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Userful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

" tabs number
if has("gui_running")
    set guitablabel=%N\ %t
endif



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Editing mappings 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Delete trailing white space on save, useful for Python and CoffeeScript
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap { {}<LEFT>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Plugins configure
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"pathogen用于管理插件的插件
execute pathogen#infect() 

" NERDTree settings {{{
nnoremap <leader>n :NERDTreeClose<CR>:NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1 "一直显示书签
let NERDTreeChDirMode=2 "打开书签时，自动将vim的pwd设为打开的目录，如果您的项目有tags文件，你会发现这个命令很有帮助

" Show hidden files, too
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1

" Quit on opening files from the tree
let NERDTreeQuitOnOpen=1

" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1

" Single click to fold/unfold directories and a double click to open
let NERDTreeMouseMode=2

" Don't display these kinds of files
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.vim$', '\.class$', '\.beam$', '^CVS$', '\~$', '\.lo$', '\.o$', '\.so$']
" }}}


"taglist settings {{{
nnoremap <leader>l :TlistClose<CR>:TlistToggle<CR>
nnoremap <leader>L :TlistClose<CR>
let Tlist_Show_One_File=1 "一次只显示一个文件的TAG
let Tlist_Exit_OnlyWindow=1 "如果taglist是最后一个窗口则自动退出
let Tlist_GainFocus_On_ToggleOpen=1 " put focus on the Taglist window when it opens
let Tlist_Close_On_Select=0
let Tlist_Use_Right_Window=1  "taglist win display right, if 0 left
let Tlist_WinWidth=40
let Tlist_Ctags_Cmd='/usr/bin/ctags'
let g:tlist_javascript_settings='javascript;s:string;a:array;o:object;f:function'
" }}}

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

"ctags
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

"vim-javascript
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

"emmet-vim
let g:user_emmet_expandabbr_key='<c-e>'
let g:user_emmet_install_global=0
autocmd FileType html,css,php,dot,vue EmmetInstall
let g:user_emmet_jsx=1

"grep.vim
"if(g:iswindows)
"    let Grep_Path='d:\grep\GnuWin32\bin\grep.exe'
"    let Fgrep_Path='d:\grep\GnuWin32\bin\fgrep.exe'
"    let Fgrep_Path='d:\grep\GnuWin32\bin\egrep.exe'
"    let Grep_Shell_Escape_Char="&#039"
"else
"    let Grep_Shell_Escape_Char="'"
"endif
"let Grep_OpenQuickfixWindow=0

"html5.vim
"let g:html5_event_handler_attributes_complete=0
let g:html5_rdfa_attrebutes_complete=0
let g:html5_microdata_attrebutes_complete=0
let g:html5_aria_attrebutes_complete=0

"vim-less
".less to .css, less is required.
nnoremap <Leader>m :w <BRA> !lessc % > %:t:r.css<CR><space>
nnoremap <Leader>m :w <BRA> !mcssc % > %:t:r.css<CR><space>

"full-screen
if has('gui_running') && has('win32')
    map<F11> :call libcallnr('gvimfullscreen.dll', 'ToggleFullScreen',0) <CR>
endif

"numbers -- 当单行文件过长的时候 这个插件会让gvim卡成翔
"let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree']

"vim-indent 这个插件也是略卡
"let g:indent_guides_guide_size=1
"let g:indentLine_color_gui='#A4E57E'



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Helper function
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
"map ,ch :call SetColorColumn()<CR>
"function! SetColorColumn()
"    let col_num = virtcol(".")
"    let cc_list = split(&cc, ',')
"    if count(cc_list, string(col_num)) <= 0
"        execute set cc+=.col_num
"    else
"        execute set cc-=.col_num
"    endif
"endfunction
